{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "b6096cd1555c49b58fbe0282cdbbbdc4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8b4c3700630e4bf78e10a315dba4cfbf",
              "IPY_MODEL_c5d8ecc0d359446db3a4c2378eed5300",
              "IPY_MODEL_74eb9ac1e84740e5ab24993e89cdc15b"
            ],
            "layout": "IPY_MODEL_cbf38b04d992418aa389247741d435d9"
          }
        },
        "8b4c3700630e4bf78e10a315dba4cfbf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d9d744d412fb4713aa7b173c5c110fde",
            "placeholder": "​",
            "style": "IPY_MODEL_196192daebe1480f9c04c14987d86f13",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "c5d8ecc0d359446db3a4c2378eed5300": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_148193654fe740a594017ab32f90e0e1",
            "max": 70,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6b6874fdb9b44e71bea8bb28d7b0d1e0",
            "value": 70
          }
        },
        "74eb9ac1e84740e5ab24993e89cdc15b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dee0c16e2845477d84cd172f4b53e966",
            "placeholder": "​",
            "style": "IPY_MODEL_9861ce9c539b46e7af742d93cb0e3be1",
            "value": " 70.0/70.0 [00:00&lt;00:00, 1.59kB/s]"
          }
        },
        "cbf38b04d992418aa389247741d435d9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d9d744d412fb4713aa7b173c5c110fde": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "196192daebe1480f9c04c14987d86f13": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "148193654fe740a594017ab32f90e0e1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6b6874fdb9b44e71bea8bb28d7b0d1e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "dee0c16e2845477d84cd172f4b53e966": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9861ce9c539b46e7af742d93cb0e3be1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1262e254ae1e4bae8e972f4f9a93599c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b4aa9b936a6841e2a57b1455a4981249",
              "IPY_MODEL_7437d5a9dc5648e08dcf569ae77cb93e",
              "IPY_MODEL_6af4e8d29d8e4b01b51fc589bce19886"
            ],
            "layout": "IPY_MODEL_429b2dd7c982486b9f67fbed862c3655"
          }
        },
        "b4aa9b936a6841e2a57b1455a4981249": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dd3c3a501b944ba392c6c5b265a4f369",
            "placeholder": "​",
            "style": "IPY_MODEL_631e666776444e029ee884d23470a9a7",
            "value": "config.json: "
          }
        },
        "7437d5a9dc5648e08dcf569ae77cb93e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3e7cceabc5d649caa00ba1bad1649904",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_abe2324e9a744d7b996555b96182f5f3",
            "value": 1
          }
        },
        "6af4e8d29d8e4b01b51fc589bce19886": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_45579b5d9bec426389ffcfde913da923",
            "placeholder": "​",
            "style": "IPY_MODEL_bd08c760adc54b259014fb17d3578205",
            "value": " 1.50k/? [00:00&lt;00:00, 34.9kB/s]"
          }
        },
        "429b2dd7c982486b9f67fbed862c3655": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dd3c3a501b944ba392c6c5b265a4f369": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "631e666776444e029ee884d23470a9a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3e7cceabc5d649caa00ba1bad1649904": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "abe2324e9a744d7b996555b96182f5f3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "45579b5d9bec426389ffcfde913da923": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bd08c760adc54b259014fb17d3578205": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0b0b3be3d7414e819706aed624ea4327": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_739a3704c58d459a889ba8e13261ee18",
              "IPY_MODEL_2f0c32874ee2491187e766dcaab81806",
              "IPY_MODEL_9e48113f50f84fbba93d4678b4899f46"
            ],
            "layout": "IPY_MODEL_9188922e4dd84777ad9adcdd392eaac9"
          }
        },
        "739a3704c58d459a889ba8e13261ee18": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d9c1ff493d83446c9ff906d1028410ee",
            "placeholder": "​",
            "style": "IPY_MODEL_2201ccb8843a4f1abf788871ee0e9071",
            "value": "vocab.json: "
          }
        },
        "2f0c32874ee2491187e766dcaab81806": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ca411fbabc70456ba88305015b8a967c",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_97a3a09a882f4d4594166d7c47e17350",
            "value": 1
          }
        },
        "9e48113f50f84fbba93d4678b4899f46": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e86d7cf904014855962d9bc41c81f5fb",
            "placeholder": "​",
            "style": "IPY_MODEL_49dc9853b30745dc9b94fd2db1401266",
            "value": " 1.56M/? [00:00&lt;00:00, 2.29MB/s]"
          }
        },
        "9188922e4dd84777ad9adcdd392eaac9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d9c1ff493d83446c9ff906d1028410ee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2201ccb8843a4f1abf788871ee0e9071": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ca411fbabc70456ba88305015b8a967c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "97a3a09a882f4d4594166d7c47e17350": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e86d7cf904014855962d9bc41c81f5fb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "49dc9853b30745dc9b94fd2db1401266": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1688afa6ed934fd6947e08983baf9839": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8d38705e82244006a84905f761452492",
              "IPY_MODEL_49f7ea52d1ae463f8d845843d242f097",
              "IPY_MODEL_2fc7f2be9cfd4188a156458d246f94d3"
            ],
            "layout": "IPY_MODEL_1b8ea395a67f4a3b94ba8c614e79394e"
          }
        },
        "8d38705e82244006a84905f761452492": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5dab917adb974246a5842ea533017055",
            "placeholder": "​",
            "style": "IPY_MODEL_f52f5a8463b2435d9c1a96c2ab7e3591",
            "value": "merges.txt: "
          }
        },
        "49f7ea52d1ae463f8d845843d242f097": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_53dd9d9901264948baa1a356e860806b",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_b55c51f0329f4d90973b763cd4ae9f28",
            "value": 1
          }
        },
        "2fc7f2be9cfd4188a156458d246f94d3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cb45e3ce62284f76ab342246648941c0",
            "placeholder": "​",
            "style": "IPY_MODEL_63fd16d4c38d48d78972481c471073ca",
            "value": " 917k/? [00:00&lt;00:00, 11.0MB/s]"
          }
        },
        "1b8ea395a67f4a3b94ba8c614e79394e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5dab917adb974246a5842ea533017055": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f52f5a8463b2435d9c1a96c2ab7e3591": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "53dd9d9901264948baa1a356e860806b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "b55c51f0329f4d90973b763cd4ae9f28": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cb45e3ce62284f76ab342246648941c0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "63fd16d4c38d48d78972481c471073ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4a2620a0215049d489c9eca4ae9c8e93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c0334127ff024b6187a6db7063df119d",
              "IPY_MODEL_819189eb179a4b27921a5b081221212b",
              "IPY_MODEL_a8e4152c61354c8eb96792e6dbe30009"
            ],
            "layout": "IPY_MODEL_1c7ad71558104c788eda634f7acd805c"
          }
        },
        "c0334127ff024b6187a6db7063df119d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d26b6967510848fe9159def2bbaac888",
            "placeholder": "​",
            "style": "IPY_MODEL_a3e42a91bca54294b48bc7ec30fb9e7e",
            "value": "pytorch_model.bin: 100%"
          }
        },
        "819189eb179a4b27921a5b081221212b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7acfee39e47e4457a261d7f0ed3e3414",
            "max": 549587475,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3af175c3c59641a9b264a63204dd60bb",
            "value": 549587475
          }
        },
        "a8e4152c61354c8eb96792e6dbe30009": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0e6ef4415873480e88a9e4083bf1c13f",
            "placeholder": "​",
            "style": "IPY_MODEL_fba7ae4493284da0bd64409879916c8a",
            "value": " 550M/550M [00:15&lt;00:00, 48.9MB/s]"
          }
        },
        "1c7ad71558104c788eda634f7acd805c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d26b6967510848fe9159def2bbaac888": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a3e42a91bca54294b48bc7ec30fb9e7e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7acfee39e47e4457a261d7f0ed3e3414": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3af175c3c59641a9b264a63204dd60bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "0e6ef4415873480e88a9e4083bf1c13f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fba7ae4493284da0bd64409879916c8a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NfHris-ucKQh",
        "outputId": "1f3a1cee-bc92-474b-ac8c-e903bc8740e3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2025-10-17 09:44:51--  https://raw.githubusercontent.com/GwenTsang/Flaubert_FlauBERT/main/romans_Flaubert/Bouvard_et_Pecuchet.txt\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 561804 (549K) [text/plain]\n",
            "Saving to: ‘Bouvard_et_Pecuchet.txt’\n",
            "\n",
            "Bouvard_et_Pecuchet 100%[===================>] 548.64K  --.-KB/s    in 0.03s   \n",
            "\n",
            "2025-10-17 09:44:51 (17.8 MB/s) - ‘Bouvard_et_Pecuchet.txt’ saved [561804/561804]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "!wget https://raw.githubusercontent.com/GwenTsang/Flaubert_FlauBERT/main/romans_Flaubert/Bouvard_et_Pecuchet.txt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Méthode sophistiquée pour l'extraction des chapitres\n",
        "\n",
        "import re\n",
        "from collections import OrderedDict\n",
        "from typing import List, Optional, Dict, Iterable\n",
        "import polars as pl\n",
        "\n",
        "ROMAN_RE = re.compile(\n",
        "    r'^(?=.)M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\\.?$',\n",
        "    re.IGNORECASE\n",
        ")\n",
        "ROMAN_TOKEN_RE = re.compile(r'\\b([IVXLCDM]+)\\b\\.?', re.IGNORECASE)\n",
        "CHAP_RE = re.compile(r'^\\s*(CHAPITRE|CHAP|CHAPTER)\\b\\.?\\s*(.*)$', re.IGNORECASE)\n",
        "\n",
        "\n",
        "def _norm_roman(tok: str) -> str:\n",
        "    return tok.rstrip('.').upper()\n",
        "\n",
        "\n",
        "def scan_headings_polars(path: str, prefer_chapitre: bool = True, allow_roman: bool = True, one_based: bool = True) -> pl.DataFrame:\n",
        "    \"\"\"\n",
        "    Parcourt le fichier ligne par ligne et retourne un pl.DataFrame avec :\n",
        "      - 'element' : chaîne (ex. \"I\" ou \"CHAPITRE I\")\n",
        "      - 'line_indices' : liste d'entiers (indices de lignes, 1-based par défaut)\n",
        "    \"\"\"\n",
        "    with open(path, encoding='utf-8') as f:\n",
        "        lines = f.read().splitlines()\n",
        "\n",
        "    n = len(lines)\n",
        "    used = set()\n",
        "    headings = OrderedDict()\n",
        "\n",
        "    def add(key: str, idxs: List[int]):\n",
        "        if one_based:\n",
        "            idxs = [i + 1 for i in idxs]\n",
        "        headings.setdefault(key, []).extend(idxs)\n",
        "\n",
        "    i = 0\n",
        "    while i < n:\n",
        "        text = lines[i].strip()\n",
        "        if not text:\n",
        "            i += 1\n",
        "            continue\n",
        "\n",
        "        if prefer_chapitre:\n",
        "            m = CHAP_RE.match(text)\n",
        "            if m:\n",
        "                rest = m.group(2).strip()\n",
        "                consumed = [i]\n",
        "                roman = None\n",
        "                if rest:\n",
        "                    t = ROMAN_TOKEN_RE.search(rest)\n",
        "                    if t and ROMAN_RE.fullmatch(t.group(1)):\n",
        "                        roman = _norm_roman(t.group(1))\n",
        "                if not roman:\n",
        "                    j = i + 1\n",
        "                    while j < n and not lines[j].strip():\n",
        "                        j += 1\n",
        "                    if j < n and allow_roman and ROMAN_RE.match(lines[j].strip()):\n",
        "                        roman = _norm_roman(lines[j].strip())\n",
        "                        consumed.append(j)\n",
        "                        used.add(j)\n",
        "                key = f\"CHAPITRE {roman}\" if roman else lines[i].strip()\n",
        "                add(key, consumed)\n",
        "                used.add(i)\n",
        "                i += 1\n",
        "                continue\n",
        "\n",
        "        if allow_roman and i not in used and ROMAN_RE.match(text):\n",
        "            roman = _norm_roman(text)\n",
        "            add(roman, [i])\n",
        "            used.add(i)\n",
        "            i += 1\n",
        "            continue\n",
        "\n",
        "        i += 1\n",
        "\n",
        "    elements = list(headings.keys())\n",
        "    indices = [headings[k] for k in elements]\n",
        "    df = pl.DataFrame({\"element\": elements, \"line_indices\": indices})\n",
        "    return df\n",
        "\n",
        "def _roman_to_int(s: str) -> int:\n",
        "    s = _norm_roman(s)\n",
        "    vals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n",
        "    total = 0\n",
        "    prev = 0\n",
        "    for ch in reversed(s):\n",
        "        v = vals[ch]\n",
        "        if v < prev:\n",
        "            total -= v\n",
        "        else:\n",
        "            total += v\n",
        "            prev = v\n",
        "    return total\n",
        "\n",
        "def _int_to_roman(n: int) -> str:\n",
        "    numerals = [\n",
        "        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n",
        "        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n",
        "        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I'),\n",
        "    ]\n",
        "    res = []\n",
        "    for val, sym in numerals:\n",
        "        while n >= val:\n",
        "            res.append(sym)\n",
        "            n -= val\n",
        "    return ''.join(res)\n",
        "\n",
        "def _extract_roman_from_element(element: str) -> Optional[str]:\n",
        "    \"\"\"\n",
        "    Returns a normalized Roman numeral token from an 'element' value\n",
        "    like 'CHAPITRE XII' or 'III'. None if no valid Roman token is found.\n",
        "    \"\"\"\n",
        "    s = element.strip()\n",
        "    if ROMAN_RE.fullmatch(s):\n",
        "        return _norm_roman(s)\n",
        "    m = ROMAN_TOKEN_RE.search(s)\n",
        "    if m:\n",
        "        tok = _norm_roman(m.group(1))\n",
        "        if ROMAN_RE.fullmatch(tok):\n",
        "            return tok\n",
        "    return None\n",
        "\n",
        "def _build_candidates_by_roman(df: pl.DataFrame) -> Dict[str, List[int]]:\n",
        "    by_roman: Dict[str, List[int]] = {}\n",
        "    for element, idxs in df.iter_rows():\n",
        "        roman = _extract_roman_from_element(element)\n",
        "        if not roman:\n",
        "            continue\n",
        "        if not isinstance(idxs, list) or not idxs:\n",
        "            continue\n",
        "        by_roman.setdefault(roman, []).extend(int(x) for x in idxs)\n",
        "    for r, lst in by_roman.items():\n",
        "        by_roman[r] = sorted(set(lst))\n",
        "    return by_roman\n",
        "\n",
        "_LETTER_TOKEN_RE = re.compile(r\"[^\\W\\d_]+\", flags=re.UNICODE)\n",
        "\n",
        "def _has_all_caps_word(line: str, min_len: int = 2) -> bool:\n",
        "    \"\"\"\n",
        "    True if the line contains a word of only letters, length >= min_len, and all letters uppercase.\n",
        "    Examples that count: 'PREFACE', 'TABLE', 'III' (roman in caps), 'PRÉFACE'\n",
        "    Examples that do NOT count: 'John', 'I' (single letter), 'Title-Case' (split as 'Title', 'Case' -> both not isupper)\n",
        "    \"\"\"\n",
        "    for tok in _LETTER_TOKEN_RE.findall(line):\n",
        "        if len(tok) >= min_len and tok.isupper():\n",
        "            return True\n",
        "    return False\n",
        "\n",
        "def _invalidates_first_I(lines: List[str], i_one_based: int, window: Iterable[int] = (1, 2, 3), require_full_window: bool = True) -> bool:\n",
        "    \"\"\"\n",
        "    Returns True if candidate index i for chapter I should be rejected:\n",
        "      - any of lines i+1, i+2, i+3 has an ALL-CAPS word (length >= 2), OR\n",
        "      - require_full_window=True and any of those lines do not exist.\n",
        "    \"\"\"\n",
        "    n = len(lines)\n",
        "    i0 = i_one_based - 1\n",
        "    if require_full_window and any(i0 + off >= n for off in window):\n",
        "        return True\n",
        "    for off in window:\n",
        "        j = i0 + off\n",
        "        if 0 <= j < n:\n",
        "            if _has_all_caps_word(lines[j].lstrip(), min_len=2):\n",
        "                return True\n",
        "    return False\n",
        "\n",
        "def select_monotonic_chapters(\n",
        "    df: pl.DataFrame,\n",
        "    target_max: int = 26,\n",
        "    require_complete: bool = False,\n",
        "    keep_candidates: bool = False,\n",
        "    min_lines: int = 8,\n",
        "    enforce_last_min: bool = False,\n",
        "    total_lines: Optional[int] = None,\n",
        "    lines: Optional[List[str]] = None,\n",
        "    require_full_window_for_I: bool = True,\n",
        ") -> pl.DataFrame:\n",
        "    \"\"\"\n",
        "    Pick one line index per chapter (I..target_max) so that:\n",
        "      - indices strictly increase\n",
        "      - each chapter start is at least `min_lines` after the previous start\n",
        "      - special rule for chapter I:\n",
        "          reject a candidate i if any of i+1, i+2, i+3 has an ALL-CAPS word (len >= 2),\n",
        "          or (optionally) if those lookahead lines are missing.\n",
        "\n",
        "    If require_complete=True, raises if a chapter cannot be placed; otherwise it is skipped.\n",
        "    Set keep_candidates=True to include the deduped candidates per chapter.\n",
        "\n",
        "    Pass `lines` as the raw file lines (list of str) to enable the chapter I rule.\n",
        "    \"\"\"\n",
        "    by_roman = _build_candidates_by_roman(df)\n",
        "    order = [_int_to_roman(i) for i in range(1, target_max + 1)]\n",
        "    out_rows = []\n",
        "    prev = 0\n",
        "\n",
        "    for r in order:\n",
        "        candidates = by_roman.get(r, [])\n",
        "        threshold = 1 if prev == 0 else prev + min_lines\n",
        "\n",
        "        chosen = None\n",
        "        if r == \"I\" and lines is not None:\n",
        "            for x in candidates:\n",
        "                if x >= threshold and not _invalidates_first_I(lines, x, require_full_window=require_full_window_for_I):\n",
        "                    chosen = x\n",
        "                    break\n",
        "        else:\n",
        "            chosen = next((x for x in candidates if x >= threshold), None)\n",
        "\n",
        "        if chosen is None:\n",
        "            if require_complete:\n",
        "                rule = \" with I-rule\" if (r == \"I\" and lines is not None) else \"\"\n",
        "                raise ValueError(f\"No feasible index for chapter {r}{rule}. Threshold={threshold}. Candidates={candidates}\")\n",
        "            continue\n",
        "\n",
        "        row = {\"element\": r, \"line\": chosen}\n",
        "        if keep_candidates:\n",
        "            row[\"candidates\"] = candidates\n",
        "        out_rows.append(row)\n",
        "        prev = chosen\n",
        "\n",
        "    if enforce_last_min and total_lines is not None:\n",
        "        while out_rows:\n",
        "            last_line = out_rows[-1][\"line\"]\n",
        "            if (total_lines - last_line + 1) >= min_lines:\n",
        "                break\n",
        "            if require_complete:\n",
        "                raise ValueError(\n",
        "                    f\"Last chapter {out_rows[-1]['element']} at line {last_line} \"\n",
        "                    f\"has fewer than {min_lines} lines until EOF ({total_lines}).\"\n",
        "                )\n",
        "            out_rows.pop()\n",
        "\n",
        "    return pl.from_dicts(out_rows)"
      ],
      "metadata": {
        "cellView": "form",
        "id": "mR69g8ssc13F"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Application des fonctions et constitution d'un dictionnaire\n",
        "\n",
        "from glob import glob\n",
        "import os\n",
        "import polars as pl\n",
        "\n",
        "\n",
        "folder = \"/content\"\n",
        "\n",
        "\n",
        "def load_chapters(path, start_lines):\n",
        "    \"\"\"Extract chapters from a text file based on start line indices.\"\"\"\n",
        "    with open(path, 'r', encoding='utf-8') as f:\n",
        "        lines = f.readlines()\n",
        "\n",
        "    n_lines = len(lines)\n",
        "    # Verification and conversion to 0-based indices\n",
        "    starts = []\n",
        "    for roman, lineno in start_lines.items():\n",
        "        if lineno < 1 or lineno > n_lines:\n",
        "            raise ValueError(f\"Invalid start index for chapter {roman}: line {lineno} (file has {n_lines} lines)\")\n",
        "        starts.append((roman, lineno - 1))\n",
        "\n",
        "    starts.sort(key=lambda x: x[1])\n",
        "\n",
        "    # Build the dictionary { 'I': 'text of chapter I', ... }\n",
        "    chapters = {}\n",
        "    for i, (roman, start_idx) in enumerate(starts):\n",
        "        end_idx = starts[i+1][1] - 1 if i < len(starts) - 1 else n_lines - 1\n",
        "        chap_text = ''.join(lines[start_idx:end_idx+1]).rstrip('\\n')\n",
        "        chapters[roman] = chap_text\n",
        "\n",
        "    return chapters\n",
        "\n",
        "\n",
        "def build_starts_index(folder: str, target_max: int = 26, min_lines: int = 8):\n",
        "    \"\"\"Build an index of chapter starts from all text files in a folder.\"\"\"\n",
        "    start_rows = []\n",
        "    starts_map = {}\n",
        "\n",
        "    for path in sorted(glob(f\"{folder}/*.txt\")):\n",
        "        with open(path, encoding=\"utf-8\") as f:\n",
        "            lines = f.read().splitlines()\n",
        "\n",
        "        df_scan = scan_headings_polars(path)\n",
        "        selected = select_monotonic_chapters(\n",
        "            df_scan,\n",
        "            target_max=target_max,\n",
        "            min_lines=min_lines,\n",
        "            lines=lines,\n",
        "        )\n",
        "\n",
        "        if selected.height == 0:\n",
        "            continue\n",
        "\n",
        "        fname = os.path.basename(path)\n",
        "        for roman, line in selected.select([\"element\", \"line\"]).iter_rows():\n",
        "            start_rows.append({\n",
        "                \"file\": fname,\n",
        "                \"path\": path,\n",
        "                \"chapter\": roman,\n",
        "                \"start_line\": int(line),\n",
        "            })\n",
        "            starts_map.setdefault(path, {})[roman] = int(line)\n",
        "\n",
        "    starts_df = (\n",
        "        pl.from_dicts(start_rows).sort([\"file\", \"start_line\"])\n",
        "        if start_rows else\n",
        "        pl.DataFrame({\"file\": [], \"path\": [], \"chapter\": [], \"start_line\": []})\n",
        "    )\n",
        "    return starts_df, starts_map\n",
        "\n",
        "\n",
        "# Build chapter start index\n",
        "starts_df, starts_map = build_starts_index(folder, target_max=26, min_lines=8)\n",
        "print(\"Chapter start index DataFrame:\")\n",
        "print(starts_df)\n",
        "\n",
        "# Load chapters for each book\n",
        "book_chapters = {}\n",
        "for path, start_lines in starts_map.items():\n",
        "    fname = os.path.basename(path)\n",
        "    chapters = load_chapters(path, start_lines)\n",
        "    book_chapters[fname] = chapters"
      ],
      "metadata": {
        "cellView": "form",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rtw3dmufeEe2",
        "outputId": "ddde8177-72d4-444f-8d45-7a8cbfb0be2b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chapter start index DataFrame:\n",
            "shape: (10, 4)\n",
            "┌─────────────────────────┬─────────────────────────────────┬─────────┬────────────┐\n",
            "│ file                    ┆ path                            ┆ chapter ┆ start_line │\n",
            "│ ---                     ┆ ---                             ┆ ---     ┆ ---        │\n",
            "│ str                     ┆ str                             ┆ str     ┆ i64        │\n",
            "╞═════════════════════════╪═════════════════════════════════╪═════════╪════════════╡\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ I       ┆ 19         │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ II      ┆ 331        │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ III     ┆ 939        │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ IV      ┆ 1865       │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ V       ┆ 2643       │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ VI      ┆ 3211       │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ VII     ┆ 4055       │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ VIII    ┆ 4337       │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ IX      ┆ 5433       │\n",
            "│ Bouvard_et_Pecuchet.txt ┆ /content/Bouvard_et_Pecuchet.t… ┆ X       ┆ 6357       │\n",
            "└─────────────────────────┴─────────────────────────────────┴─────────┴────────────┘\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define input and output file paths\n",
        "input_file = \"/content/Bouvard_et_Pecuchet.txt\"\n",
        "output_file = \"/content/Bouvard_et_Pecuchet_chapitre_1.txt\"\n",
        "\n",
        "# Define the line range to retain\n",
        "start_line = 22\n",
        "end_line = 330\n",
        "\n",
        "# Open the input file and extract the required lines\n",
        "with open(input_file, \"r\", encoding=\"utf-8\") as infile:\n",
        "    lines = infile.readlines()\n",
        "\n",
        "# Select only lines 19 to 331 (Python uses 0-based indexing)\n",
        "selected_lines = lines[start_line - 1:end_line]\n",
        "\n",
        "# Write the selected lines to a new file\n",
        "with open(output_file, \"w\", encoding=\"utf-8\") as outfile:\n",
        "    outfile.writelines(selected_lines)\n",
        "\n",
        "print(f\"Lines {start_line} to {end_line} have been saved to {output_file}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOtcNbbpecZc",
        "outputId": "db6c74af-7042-47ed-8350-35b7dd820742"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lines 22 to 330 have been saved to /content/Bouvard_et_Pecuchet_chapitre_1.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "\n",
        "file_path = \"/content/Bouvard_et_Pecuchet_chapitre_1.txt\"\n",
        "\n",
        "with open(file_path, \"r\", encoding=\"utf-8\") as f:\n",
        "    text = f.read()\n",
        "\n",
        "# This pattern splits at '.', '?', or '!' followed by a space or end of line\n",
        "sentences = re.split(r'[.!?]+(?:\\s|$)', text)\n",
        "\n",
        "sentences = [s.strip() for s in sentences if s.strip()]\n",
        "\n",
        "num_sentences = len(sentences)\n",
        "\n",
        "print(f\"Number of sentences in the file: {num_sentences}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eM1aaT6neydc",
        "outputId": "0d341505-814d-45a6-d574-eb9b9bc3d5ba"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of sentences in the file: 389\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install sacremoses torch -q"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V_QXlHFqcjQd",
        "outputId": "59271494-0bcb-4722-dba4-fbd9253f6628"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/897.5 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━\u001b[0m \u001b[32m706.6/897.5 kB\u001b[0m \u001b[31m22.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m897.5/897.5 kB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load model directly\n",
        "from transformers import AutoTokenizer, AutoModelForMaskedLM\n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained(\"flaubert/flaubert_base_uncased\")\n",
        "model = AutoModelForMaskedLM.from_pretrained(\"flaubert/flaubert_base_uncased\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 177,
          "referenced_widgets": [
            "b6096cd1555c49b58fbe0282cdbbbdc4",
            "8b4c3700630e4bf78e10a315dba4cfbf",
            "c5d8ecc0d359446db3a4c2378eed5300",
            "74eb9ac1e84740e5ab24993e89cdc15b",
            "cbf38b04d992418aa389247741d435d9",
            "d9d744d412fb4713aa7b173c5c110fde",
            "196192daebe1480f9c04c14987d86f13",
            "148193654fe740a594017ab32f90e0e1",
            "6b6874fdb9b44e71bea8bb28d7b0d1e0",
            "dee0c16e2845477d84cd172f4b53e966",
            "9861ce9c539b46e7af742d93cb0e3be1",
            "1262e254ae1e4bae8e972f4f9a93599c",
            "b4aa9b936a6841e2a57b1455a4981249",
            "7437d5a9dc5648e08dcf569ae77cb93e",
            "6af4e8d29d8e4b01b51fc589bce19886",
            "429b2dd7c982486b9f67fbed862c3655",
            "dd3c3a501b944ba392c6c5b265a4f369",
            "631e666776444e029ee884d23470a9a7",
            "3e7cceabc5d649caa00ba1bad1649904",
            "abe2324e9a744d7b996555b96182f5f3",
            "45579b5d9bec426389ffcfde913da923",
            "bd08c760adc54b259014fb17d3578205",
            "0b0b3be3d7414e819706aed624ea4327",
            "739a3704c58d459a889ba8e13261ee18",
            "2f0c32874ee2491187e766dcaab81806",
            "9e48113f50f84fbba93d4678b4899f46",
            "9188922e4dd84777ad9adcdd392eaac9",
            "d9c1ff493d83446c9ff906d1028410ee",
            "2201ccb8843a4f1abf788871ee0e9071",
            "ca411fbabc70456ba88305015b8a967c",
            "97a3a09a882f4d4594166d7c47e17350",
            "e86d7cf904014855962d9bc41c81f5fb",
            "49dc9853b30745dc9b94fd2db1401266",
            "1688afa6ed934fd6947e08983baf9839",
            "8d38705e82244006a84905f761452492",
            "49f7ea52d1ae463f8d845843d242f097",
            "2fc7f2be9cfd4188a156458d246f94d3",
            "1b8ea395a67f4a3b94ba8c614e79394e",
            "5dab917adb974246a5842ea533017055",
            "f52f5a8463b2435d9c1a96c2ab7e3591",
            "53dd9d9901264948baa1a356e860806b",
            "b55c51f0329f4d90973b763cd4ae9f28",
            "cb45e3ce62284f76ab342246648941c0",
            "63fd16d4c38d48d78972481c471073ca",
            "4a2620a0215049d489c9eca4ae9c8e93",
            "c0334127ff024b6187a6db7063df119d",
            "819189eb179a4b27921a5b081221212b",
            "a8e4152c61354c8eb96792e6dbe30009",
            "1c7ad71558104c788eda634f7acd805c",
            "d26b6967510848fe9159def2bbaac888",
            "a3e42a91bca54294b48bc7ec30fb9e7e",
            "7acfee39e47e4457a261d7f0ed3e3414",
            "3af175c3c59641a9b264a63204dd60bb",
            "0e6ef4415873480e88a9e4083bf1c13f",
            "fba7ae4493284da0bd64409879916c8a"
          ]
        },
        "id": "i0eiuDrZckil",
        "outputId": "ffb6d913-4e82-4054-de02-83c651f8cd38"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/70.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b6096cd1555c49b58fbe0282cdbbbdc4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1262e254ae1e4bae8e972f4f9a93599c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.json: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0b0b3be3d7414e819706aed624ea4327"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "merges.txt: 0.00B [00:00, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1688afa6ed934fd6947e08983baf9839"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "pytorch_model.bin:   0%|          | 0.00/550M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "4a2620a0215049d489c9eca4ae9c8e93"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install nltk -q"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9m86OsomMKA",
        "outputId": "bde55893-b092-4103-efb4-9e2e6278b73c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: nltk in /usr/local/lib/python3.12/dist-packages (3.9.1)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.12/dist-packages (from nltk) (8.3.0)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.12/dist-packages (from nltk) (1.5.2)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.12/dist-packages (from nltk) (2024.11.6)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.12/dist-packages (from nltk) (4.67.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "nltk.download(\"punkt\")\n",
        "nltk.download(\"punkt_tab\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pyMVp-UqlLi4",
        "outputId": "c0ef3bad-a1e6-47ff-ff5a-8fa4205c20fa"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Unzipping tokenizers/punkt_tab.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Segmentation des phrases françaises de Bouvard et Pécuchet + intégrations FlauBERT\n",
        "\n",
        "import os\n",
        "import re\n",
        "import pickle\n",
        "from typing import List, Dict\n",
        "\n",
        "import torch\n",
        "import numpy as np\n",
        "from transformers import AutoTokenizer, AutoModel\n",
        "\n",
        "# --- Paths and constants ---\n",
        "FILE_PATH = \"/content/Bouvard_et_Pecuchet.txt\"\n",
        "DICT_PATH = \"/content/flaubert_sentence_embeddings.pkl\"  # sentence -> np.ndarray (float32)\n",
        "SENTENCES_TXT = \"/content/sentences_extracted.txt\"       # optional: inspect extracted sentences\n",
        "EXPECTED_SENT_COUNT = 500\n",
        "BATCH_SIZE = 32\n",
        "MODEL_NAME = \"flaubert/flaubert_base_uncased\"\n",
        "\n",
        "# --- Load tokenizer and model ---\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\n",
        "model = AutoModel.from_pretrained(MODEL_NAME).to(device)\n",
        "model.eval()\n",
        "\n",
        "# --- Sentence segmentation helpers ---\n",
        "def download_nltk_punkt():\n",
        "    try:\n",
        "        import nltk\n",
        "        # Try to locate; if missing, download\n",
        "        try:\n",
        "            nltk.data.find(\"tokenizers/punkt\")\n",
        "        except LookupError:\n",
        "            nltk.download(\"punkt\", quiet=True)\n",
        "        # Punkt_tab is required in newer NLTK (>=3.9)\n",
        "        try:\n",
        "            nltk.data.find(\"tokenizers/punkt_tab\")\n",
        "        except LookupError:\n",
        "            nltk.download(\"punkt_tab\", quiet=True)\n",
        "        return True\n",
        "    except Exception as e:\n",
        "        print(f\"NLTK download failed or unavailable: {e}\")\n",
        "        return False\n",
        "\n",
        "def rule_based_split(text: str) -> List[str]:\n",
        "    # Normalize whitespace and unify ellipsis\n",
        "    text = text.replace(\"…\", \"...\")\n",
        "    text = re.sub(r\"\\s+\", \" \", text).strip()\n",
        "\n",
        "    # Protect common French abbreviations that include a period\n",
        "    abbr_pattern = re.compile(\n",
        "        r\"\\b(?:M|MM|Mme|Mlle|Dr|Pr|Prof|St|Ste|Sr|Sra|cf|etc|env|ex|vol|éd|No|Nº|nº|n°|p|pp|al|fig|art|av|apr|vs)\\.\",\n",
        "        flags=re.IGNORECASE,\n",
        "    )\n",
        "    text = abbr_pattern.sub(lambda m: m.group(0)[:-1] + \"<DOT>\", text)\n",
        "\n",
        "    # Protect decimals: 12.5 -> 12<DEC>5\n",
        "    text = re.sub(r\"(?<=\\d)\\.(?=\\d)\", \"<DEC>\", text)\n",
        "\n",
        "    # Protect ellipses\n",
        "    text = text.replace(\"...\", \"<ELLIPSIS>\")\n",
        "\n",
        "    # Split on . ? ! (not the protected placeholders), keeping end punctuation with the sentence\n",
        "    parts = re.split(r\"(?<!<ELLIPSIS>)(?<=[.!?])\\s+\", text)\n",
        "\n",
        "    # Restore placeholders\n",
        "    def restore(s: str) -> str:\n",
        "        s = s.replace(\"<ELLIPSIS>\", \"...\")\n",
        "        s = s.replace(\"<DEC>\", \".\")\n",
        "        s = s.replace(\"<DOT>\", \".\")\n",
        "        return s.strip()\n",
        "\n",
        "    sentences = [restore(p) for p in parts if p and restore(p)]\n",
        "    return sentences\n",
        "\n",
        "def extract_sentences(path: str) -> List[str]:\n",
        "    with open(path, \"r\", encoding=\"utf-8\") as f:\n",
        "        text = f.read()\n",
        "\n",
        "    # First try NLTK (preferred)\n",
        "    sentences = None\n",
        "    if download_nltk_punkt():\n",
        "        try:\n",
        "            from nltk.tokenize import sent_tokenize\n",
        "            sentences = [s.strip() for s in sent_tokenize(text, language=\"french\") if s.strip()]\n",
        "        except Exception as e:\n",
        "            print(f\"NLTK sent_tokenize failed, falling back to rule-based: {e}\")\n",
        "\n",
        "    if sentences is None:\n",
        "        sentences = rule_based_split(text)\n",
        "\n",
        "    print(f\"Extracted {len(sentences)} sentences.\")\n",
        "    if len(sentences) != EXPECTED_SENT_COUNT:\n",
        "        print(f\"Warning: expected {EXPECTED_SENT_COUNT} sentences, got {len(sentences)}. Proceeding anyway.\")\n",
        "\n",
        "    # Optional: save for inspection\n",
        "    with open(SENTENCES_TXT, \"w\", encoding=\"utf-8\") as out:\n",
        "        for s in sentences:\n",
        "            out.write(s + \"\\n\")\n",
        "\n",
        "    # Note about duplicates (dictionary keys will merge duplicates)\n",
        "    uniq = len(set(sentences))\n",
        "    if uniq != len(sentences):\n",
        "        print(f\"Note: {len(sentences) - uniq} duplicate sentence(s) detected. \"\n",
        "              f\"Since the dictionary uses sentences as keys, duplicates will be merged.\")\n",
        "\n",
        "    return sentences\n",
        "\n",
        "# --- Mean pooling over last hidden layer ---\n",
        "def mean_pooling(last_hidden_state: torch.Tensor, attention_mask: torch.Tensor) -> torch.Tensor:\n",
        "    mask = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n",
        "    masked_embeddings = last_hidden_state * mask\n",
        "    sum_embeddings = masked_embeddings.sum(dim=1)\n",
        "    lengths = mask.sum(dim=1).clamp(min=1e-9)\n",
        "    return sum_embeddings / lengths  # [batch, hidden]\n",
        "\n",
        "# --- Embed sentences in batches ---\n",
        "def embed_sentences(sentences: List[str]) -> Dict[str, np.ndarray]:\n",
        "    sentence_to_emb: Dict[str, np.ndarray] = {}\n",
        "    with torch.no_grad():\n",
        "        for start in range(0, len(sentences), BATCH_SIZE):\n",
        "            batch = sentences[start:start + BATCH_SIZE]\n",
        "            enc = tokenizer(\n",
        "                batch,\n",
        "                return_tensors=\"pt\",\n",
        "                padding=True,\n",
        "                truncation=True,\n",
        "                max_length=512\n",
        "            ).to(device)\n",
        "\n",
        "            outputs = model(**enc)\n",
        "            last_hidden = outputs.last_hidden_state  # [B, T, H]\n",
        "            sent_emb = mean_pooling(last_hidden, enc[\"attention_mask\"])  # [B, H]\n",
        "            sent_emb = sent_emb.detach().cpu().numpy().astype(np.float32)\n",
        "\n",
        "            for s, e in zip(batch, sent_emb):\n",
        "                sentence_to_emb[s] = e\n",
        "\n",
        "            done = min(start + BATCH_SIZE, len(sentences))\n",
        "            if done % (BATCH_SIZE * 4) == 0 or done == len(sentences):\n",
        "                print(f\"Encoded {done}/{len(sentences)} sentences\")\n",
        "    return sentence_to_emb\n",
        "\n",
        "# --- Run all steps ---\n",
        "sentences = extract_sentences(FILE_PATH)\n",
        "emb_dict = embed_sentences(sentences)\n",
        "\n",
        "with open(DICT_PATH, \"wb\") as f:\n",
        "    pickle.dump(emb_dict, f)\n",
        "\n",
        "print(f\"Saved {len(emb_dict)} sentence embeddings to {DICT_PATH}\")\n",
        "print(\"Done.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "cellView": "form",
        "id": "QndWnyUbn4HA",
        "outputId": "76d1ed0e-184b-44e4-b867-5da1353a90e7"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracted 6590 sentences.\n",
            "Warning: expected 500 sentences, got 6590. Proceeding anyway.\n",
            "Note: 226 duplicate sentence(s) detected. Since the dictionary uses sentences as keys, duplicates will be merged.\n",
            "Encoded 128/6590 sentences\n",
            "Encoded 256/6590 sentences\n",
            "Encoded 384/6590 sentences\n",
            "Encoded 512/6590 sentences\n",
            "Encoded 640/6590 sentences\n",
            "Encoded 768/6590 sentences\n",
            "Encoded 896/6590 sentences\n",
            "Encoded 1024/6590 sentences\n",
            "Encoded 1152/6590 sentences\n",
            "Encoded 1280/6590 sentences\n",
            "Encoded 1408/6590 sentences\n",
            "Encoded 1536/6590 sentences\n",
            "Encoded 1664/6590 sentences\n",
            "Encoded 1792/6590 sentences\n",
            "Encoded 1920/6590 sentences\n",
            "Encoded 2048/6590 sentences\n",
            "Encoded 2176/6590 sentences\n",
            "Encoded 2304/6590 sentences\n",
            "Encoded 2432/6590 sentences\n",
            "Encoded 2560/6590 sentences\n",
            "Encoded 2688/6590 sentences\n",
            "Encoded 2816/6590 sentences\n",
            "Encoded 2944/6590 sentences\n",
            "Encoded 3072/6590 sentences\n",
            "Encoded 3200/6590 sentences\n",
            "Encoded 3328/6590 sentences\n",
            "Encoded 3456/6590 sentences\n",
            "Encoded 3584/6590 sentences\n",
            "Encoded 3712/6590 sentences\n",
            "Encoded 3840/6590 sentences\n",
            "Encoded 3968/6590 sentences\n",
            "Encoded 4096/6590 sentences\n",
            "Encoded 4224/6590 sentences\n",
            "Encoded 4352/6590 sentences\n",
            "Encoded 4480/6590 sentences\n",
            "Encoded 4608/6590 sentences\n",
            "Encoded 4736/6590 sentences\n",
            "Encoded 4864/6590 sentences\n",
            "Encoded 4992/6590 sentences\n",
            "Encoded 5120/6590 sentences\n",
            "Encoded 5248/6590 sentences\n",
            "Encoded 5376/6590 sentences\n",
            "Encoded 5504/6590 sentences\n",
            "Encoded 5632/6590 sentences\n",
            "Encoded 5760/6590 sentences\n",
            "Encoded 5888/6590 sentences\n",
            "Encoded 6016/6590 sentences\n",
            "Encoded 6144/6590 sentences\n",
            "Encoded 6272/6590 sentences\n",
            "Encoded 6400/6590 sentences\n",
            "Encoded 6528/6590 sentences\n",
            "Encoded 6590/6590 sentences\n",
            "Saved 6364 sentence embeddings to /content/flaubert_sentence_embeddings.pkl\n",
            "Done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title À partir d'une phrase, renvoyer la phrase la plus similaire dans Bouvard et Pécuchet\n",
        "\n",
        "import pickle\n",
        "import numpy as np\n",
        "import torch\n",
        "from transformers import AutoTokenizer, AutoModel\n",
        "\n",
        "DICT_PATH = \"/content/flaubert_sentence_embeddings.pkl\"\n",
        "MODEL_NAME = \"flaubert/flaubert_base_uncased\"\n",
        "\n",
        "# Load tokenizer/model (same checkpoint)\n",
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
        "tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)\n",
        "model = AutoModel.from_pretrained(MODEL_NAME).to(device)\n",
        "model.eval()\n",
        "\n",
        "# Mean pooling helper (same as in Part 1)\n",
        "def mean_pooling(last_hidden_state: torch.Tensor, attention_mask: torch.Tensor) -> torch.Tensor:\n",
        "    mask = attention_mask.unsqueeze(-1).expand(last_hidden_state.size()).float()\n",
        "    masked_embeddings = last_hidden_state * mask\n",
        "    sum_embeddings = masked_embeddings.sum(dim=1)\n",
        "    lengths = mask.sum(dim=1).clamp(min=1e-9)\n",
        "    return sum_embeddings / lengths\n",
        "\n",
        "# Load the saved dictionary: sentence -> embedding (np.ndarray)\n",
        "with open(DICT_PATH, \"rb\") as f:\n",
        "    sentence_to_emb = pickle.load(f)\n",
        "\n",
        "# Build arrays for vectorized similarity\n",
        "sentences = list(sentence_to_emb.keys())\n",
        "emb_matrix = np.stack([sentence_to_emb[s] for s in sentences], axis=0)  # [N, H]\n",
        "# Pre-normalize for cosine similarity\n",
        "emb_norms = np.linalg.norm(emb_matrix, axis=1, keepdims=True)\n",
        "emb_norms[emb_norms == 0] = 1e-12\n",
        "emb_matrix_normed = emb_matrix / emb_norms  # [N, H]\n",
        "\n",
        "def embed_sentence(sentence: str) -> np.ndarray:\n",
        "    with torch.no_grad():\n",
        "        enc = tokenizer(\n",
        "            [sentence],\n",
        "            return_tensors=\"pt\",\n",
        "            padding=True,\n",
        "            truncation=True,\n",
        "            max_length=512\n",
        "        ).to(device)\n",
        "        outputs = model(**enc)\n",
        "        last_hidden = outputs.last_hidden_state\n",
        "        sent_emb = mean_pooling(last_hidden, enc[\"attention_mask\"])  # [1, H]\n",
        "        return sent_emb.squeeze(0).detach().cpu().numpy().astype(np.float32)\n",
        "\n",
        "def most_similar_sentence(query: str) -> str:\n",
        "    q = embed_sentence(query)\n",
        "    q_norm = np.linalg.norm(q)\n",
        "    if q_norm == 0:\n",
        "        q_norm = 1e-12\n",
        "    q = q / q_norm\n",
        "    sims = emb_matrix_normed @ q  # cosine similarity\n",
        "    best_idx = int(np.argmax(sims))\n",
        "    return sentences[best_idx]"
      ],
      "metadata": {
        "id": "Z9WpNFyboHWY"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"Que Dieu nous vienne en aide\"\n",
        "print(most_similar_sentence(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4TmbO9QNoRAg",
        "outputId": "f95b00ab-a2eb-4705-be38-7816113add03"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Les vaincus de chaque côté, naturellement sont des martyrs.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"Attend un peu dit Paul, en fouillant dans le tas de leur\"\n",
        "print(most_similar_sentence(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RTX7gWW-oU6X",
        "outputId": "a8b959a8-6db5-4c8a-f625-ecb792e19444"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "—Vraiment dit Bouvard, pour quelques paroles!…\n",
            "\n",
            "—Quand la parole amène des crimes, cher monsieur, permettez!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"Bonjour\"\n",
        "print(most_similar_sentence(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DCDtiv7pooo_",
        "outputId": "2fff6d0f-b053-4083-cc2e-6eda8a828702"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "je souffre!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"Au revoir\"\n",
        "print(most_similar_sentence(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GpG3l83noruP",
        "outputId": "46b4175c-88d6-41e9-8f71-64d64cc4e1ad"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Il était soucieux;—M.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "query = \"La médecine est une science exacte\"\n",
        "print(most_similar_sentence(query))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MUN6kN1YotwA",
        "outputId": "c5f15d8f-a0f0-459f-dc4b-0fe8fa451ef4"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "—Vraiment dit Bouvard, pour quelques paroles!…\n",
            "\n",
            "—Quand la parole amène des crimes, cher monsieur, permettez!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Conjecture** : C'est très rapide, mais par contre, la performance est assez catastrophique"
      ],
      "metadata": {
        "id": "zq1Grmpuon-A"
      }
    }
  ]
}
